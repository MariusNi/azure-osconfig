# E2E Baremetal Test Stage Definition
# Parameters:
#  - (Required) jobName [string]: Name to use for the job and stage
#  - (Required) deviceId [string]:  the deviceId to use on the IoT Hub (pre-provisioned)
#  - (Required) packagePattern [string]: the package to stage onto the host
#  - (Required) environment [string]: the environment to target, targets a pipeline agent with that environment
#  - (Optional) twinTimeout [number]: Timeout for twin updates - default: 90 seconds
#  - (Optional) testExpression [string]: the test expression to use to filter the tests (see https://docs.microsoft.com/dotnet/core/testing/selective-unit-tests?pivots=mstest) - default: all tests
#  - (Optional) sourceBranch [string]: package branch to use - default: Uses source branch

parameters:
- name: jobName
  type: string
- name: deviceId
  type: string
- name: packagePattern
  type: string
  default: ' '
- name: environment
  type: string
- name: twinTimeout
  displayName: Timeout for twin updates
  type: number
  default: 90
- name: testExpression
  type: string
  default: ' '
- name: sourceBranch
  displayName: 'Branch to use package from (default: source branch if empty)'
  type: string
  default: ' '
- name: sourceBuild
  displayName: Build and install source
  type: boolean
  default: false

stages:
- stage: ${{ parameters.jobName }}
  displayName: Baremetal - ${{ parameters.environment }}
  dependsOn: []

  jobs:
  - job: ${{ parameters.jobName }}

    pool:
      name: OSConfig
      demands:
      - ${{ parameters.environment }}

    workspace:
      clean: all

    steps:
    - ${{ if and(eq(parameters.sourceBuild, False), ne(parameters.sourceBranch, ' ')) }}:
      - task: DownloadPipelineArtifact@2
        displayName: Download OSConfig from pipeline (${{ parameters.sourceBranch }})
        inputs:
          source: 'specific'
          project: 'AzOsConfig'
          pipeline: $(package_pipeline)
          runVersion: 'latestFromBranch'
          runBranch: ${{ parameters.sourceBranch }}
          itemPattern: ${{ parameters.packagePattern }}
    - ${{ if and(eq(parameters.sourceBuild, False), eq(parameters.sourceBranch, ' ')) }}:
      - task: DownloadPipelineArtifact@2
        displayName: Download OSConfig from pipeline ($(Build.SourceBranch))
        inputs:
          source: 'specific'
          project: 'AzOsConfig'
          pipeline: $(package_pipeline)
          runVersion: 'latestFromBranch'
          runBranch: $(Build.SourceBranch)
          itemPattern: ${{ parameters.packagePattern }}

    - ${{ if eq(parameters.sourceBuild, False) }}:
      - script: |
          sudo dpkg -i `find . -name '*.deb' | head -n 1`
          sudo sed -i '/\"FullLogging\"/c\\  \"FullLogging\": 1,' /etc/osconfig/osconfig.json
          sudo systemctl daemon-reload
          sudo systemctl enable osconfig.service
          sudo systemctl start osconfig
        displayName: Install OSConfig
        workingDirectory: $(Pipeline.Workspace)
        condition: succeeded()
    - ${{ if eq(parameters.sourceBuild, True) }}:
      - checkout: self
        submodules: recursive
      - script: |
          sudo systemctl stop osconfig | true
          cmake -DCMAKE_BUILD_TYPE=Release -Duse_prov_client=ON -Dhsm_type_symm_key=ON -DCOMPILE_WITH_STRICTNESS=ON -DMAJOR_VERSION=$(MAJORVERSION) -DMINOR_VERSION=$(MINORVERSION) -DPATCH_VERSION=$(PATCHVERSION) -G Ninja -B./build -H./src
          sudo cmake --build ./build --target install
          sudo sed -i '/\"FullLogging\"/c\\  \"FullLogging\": 1,' /etc/osconfig/osconfig.json
          sudo systemctl daemon-reload
          sudo systemctl enable osconfig.service
          sudo systemctl start osconfig
          sudo rm -rf ./build
        displayName: Build and Install OSConfig (from source)
        workingDirectory: $(Build.SourcesDirectory)
        condition: succeeded()

    - ${{ if ne(parameters.testExpression, ' ') }}:
      - script: dotnet test --filter "${{ parameters.testExpression }}" --logger trx
        displayName: Run Test Driver (Filtered)
        env:
          E2E_OSCONFIG_IOTHUB_CONNSTR: $(BAREMETAL_IOTHUB_CONNECTION_STRING)
          E2E_OSCONFIG_DEVICE_ID: ${{parameters.deviceId}}
          E2E_OSCONFIG_SAS_TOKEN: $(SAS_TOKEN)
          E2E_OSCONFIG_UPLOAD_URL: $(UPLOAD_URL_BASE_PATH)
          E2E_OSCONFIG_RESOURCE_GROUP_NAME: baremetal-$(Build.BuildNumber)
          E2E_OSCONFIG_TWIN_TIMEOUT: ${{ parameters.twinTimeout }}
        workingDirectory: $(Build.SourcesDirectory)/src/tests/e2etest
        condition: succeeded()
    - ${{ if eq(parameters.testExpression, ' ') }}:
      - script: dotnet test --logger trx
        displayName: Run Test Driver
        env:
          E2E_OSCONFIG_IOTHUB_CONNSTR: $(BAREMETAL_IOTHUB_CONNECTION_STRING)
          E2E_OSCONFIG_DEVICE_ID: ${{parameters.deviceId}}
          E2E_OSCONFIG_SAS_TOKEN: $(SAS_TOKEN)
          E2E_OSCONFIG_UPLOAD_URL: $(UPLOAD_URL_BASE_PATH)
          E2E_OSCONFIG_RESOURCE_GROUP_NAME: baremetal-$(Build.BuildNumber)
          E2E_OSCONFIG_TWIN_TIMEOUT: ${{ parameters.twinTimeout }}
        workingDirectory: $(Build.SourcesDirectory)/src/tests/e2etest
        condition: succeeded()

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      continueOnError: true
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Build.SourcesDirectory)/src/tests/e2etest/TestResults/*.trx
        failTaskOnFailedTests: true
        testRunTitle: ${{ parameters.environment }}

    - script: |
        prefix=`echo baremetal-$(Build.BuildNumber)`
        mkdir -p $(Build.ArtifactStagingDirectory)/logs
        wget "$(UPLOAD_URL_BASE_PATH)`echo $prefix`-${{parameters.deviceId}}.tar.gz?$(SAS_TOKEN)" -O $(Build.ArtifactStagingDirectory)/logs/`echo $prefix`-${{parameters.deviceId}}.tar.gz
      displayName: Get OSConfig logs from blobstore
      condition: succeededOrFailed()
      continueOnError: true

    - publish: '$(Build.ArtifactStagingDirectory)/logs/'
      displayName: 'Publish OSConfig Logs'
      condition: succeeded()
      continueOnError: true
      artifact: Logs_${{parameters.environment}}